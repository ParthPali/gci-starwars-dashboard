{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n            getEveryPerson($pageNo){\\n                count\\n                next\\n                results{\\n                    name\\n                    gender\\n                    skin_color\\n                    birth_year\\n                    eye_color\\n\\n                }\\n            }\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport client from 'apollo-boost';\n\nconst styles = theme => ({\n  poster: {\n    width: '100%',\n    height: '300px'\n  },\n  home: {\n    margin: '40px',\n    paddingTop: '100px'\n  },\n  title: {\n    padding: '15px',\n    color: '#FFE81F',\n    borderRadius: '10px',\n    backgroundColor: 'black',\n    textAlign: 'center'\n  }\n});\n\nconst getPerson = pageNum => {\n  const _client$readQuery = client.readQuery({\n    query: gql(_templateObject()),\n    variables: {\n      pageNo: pageNum\n    }\n  }),\n        all = _client$readQuery.all;\n\n  console.log(all);\n  return all;\n};\n/*\nconst makeQuery = (pageNo) =>{\n    return(\n    <Query query={getPerson(pageNo)}>\n        {({loading, error, data }) =>{\n            if(loading) return 1\n            if(error) console.log(error)\n            return data;\n        }}\n    </Query>\n    )\n}*/\n\n\nexport class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      People: {\n        currentPage: 1,\n        count: null,\n        people: null,\n        per_page: null\n      }\n    };\n  }\n  /*\n  makeQuery = () =>{\n      \n      <Query query={getPerson(this.state.People.currentPage)}>\n          {({loading, error, data }) =>{\n              if(loading) return 1\n              if(error) console.log(error)\n              const result = data.getEveryPerson.results\n              console.log(result);\n              \n              return 1;\n           }}  \n      </Query>\n      \n  }\n  changeState = (pageNo) =>{\n      const { data } = this.makeQuery(pageNo);\n      console.log(data);\n  }\n  \n  setPageNumber = pageNo =>{\n      this.setState({\n          People:{\n              currentPage: pageNo\n          }\n      })\n  }\n  /*\n  componentDidMount(){\n      console.log(\"hello\");\n      console.log(this.makeQuery(1))\n      console.log('compo data');\n  }*/\n\n\n  render() {\n    let classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: classes.home,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.People,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"CHARACTERS\"), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, getPerson(1))));\n  }\n\n}\nHome.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Home);","map":{"version":3,"sources":["/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js"],"names":["React","Component","gql","Query","useQuery","PropTypes","withStyles","poster","Person","Grid","client","styles","theme","width","height","home","margin","paddingTop","title","padding","color","borderRadius","backgroundColor","textAlign","getPerson","pageNum","readQuery","query","variables","pageNo","all","console","log","Home","constructor","props","state","People","currentPage","count","people","per_page","render","classes","propTypes","object","isRequired"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AACA,MAAMC,MAAM,GAAGC,KAAK,KAAI;AAEpBL,EAAAA,MAAM,EAAC;AACHM,IAAAA,KAAK,EAAE,MADJ;AAEHC,IAAAA,MAAM,EAAE;AAFL,GAFa;AAMpBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,MAAM,EAAE,MADP;AAEDC,IAAAA,UAAU,EAAE;AAFX,GANe;AAUpBC,EAAAA,KAAK,EAAC;AAEFC,IAAAA,OAAO,EAAE,MAFP;AAGFC,IAAAA,KAAK,EAAE,SAHL;AAIFC,IAAAA,YAAY,EAAE,MAJZ;AAKFC,IAAAA,eAAe,EAAE,OALf;AAMFC,IAAAA,SAAS,EAAE;AANT;AAVc,CAAJ,CAApB;;AAoBA,MAAMC,SAAS,GAAIC,OAAD,IAAY;AAAA,4BAEVf,MAAM,CAACgB,SAAP,CAAiB;AAC7BC,IAAAA,KAAK,EAAEzB,GAAF,mBADwB;AAe7B0B,IAAAA,SAAS,EAAC;AACNC,MAAAA,MAAM,EAAEJ;AADF;AAfmB,GAAjB,CAFU;AAAA,QAElBK,GAFkB,qBAElBA,GAFkB;;AAsB1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,SAAOA,GAAP;AAEH,CAzBD;AA0BA;;;;;;;;;;;;;;AAaA,OAAO,MAAMG,IAAN,SAAmBhC,SAAnB,CAA6B;AAEhCiC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAETC,MAAAA,MAAM,EAAE;AACJC,QAAAA,WAAW,EAAE,CADT;AAEJC,QAAAA,KAAK,EAAE,IAFH;AAGJC,QAAAA,MAAM,EAAE,IAHJ;AAIJC,QAAAA,QAAQ,EAAE;AAJN;AAFC,KAAb;AAUH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCAC,EAAAA,MAAM,GAAG;AAAA,QAECC,OAFD,GAEa,KAAKR,KAFlB,CAECQ,OAFD;AAIL,WAGI;AAAK,MAAA,SAAS,EAAEA,OAAO,CAAC5B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,SAAS,EAAE4B,OAAO,CAACN,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAI,MAAA,SAAS,EAAEM,OAAO,CAACzB,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAGI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCM,SAAS,CAAC,CAAD,CADV,CAHJ,CAFJ,CAHJ;AA+BH;;AArF+B;AAwFpCS,IAAI,CAACW,SAAL,GAAiB;AACbD,EAAAA,OAAO,EAAEtC,SAAS,CAACwC,MAAV,CAAiBC;AADb,CAAjB;AAIA,eAAexC,UAAU,CAACK,MAAD,CAAV,CAAmBsB,IAAnB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport client from 'apollo-boost';\nconst styles = theme=> ({\n    \n    poster:{\n        width: '100%',\n        height: '300px'\n    },\n    home:{\n        margin: '40px',\n        paddingTop: '100px',\n    },\n    title:{\n        \n        padding: '15px',\n        color: '#FFE81F',\n        borderRadius: '10px',\n        backgroundColor: 'black',\n        textAlign: 'center'\n    }\n})\n\nconst getPerson = (pageNum) =>{\n    \n    const { all } = client.readQuery({\n        query: gql`\n            getEveryPerson($pageNo){\n                count\n                next\n                results{\n                    name\n                    gender\n                    skin_color\n                    birth_year\n                    eye_color\n\n                }\n            }\n        `,\n        variables:{\n            pageNo: pageNum\n        }\n    });\n\n    console.log(all);\n    return all;\n    \n}\n/*\nconst makeQuery = (pageNo) =>{\n    return(\n    <Query query={getPerson(pageNo)}>\n        {({loading, error, data }) =>{\n            if(loading) return 1\n            if(error) console.log(error)\n            return data;\n        }}\n    </Query>\n    )\n}*/\n\nexport class Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            People: {\n                currentPage: 1,\n                count: null,\n                people: null,\n                per_page: null,\n            }\n            \n        }\n    }\n    /*\n    makeQuery = () =>{\n        \n        <Query query={getPerson(this.state.People.currentPage)}>\n            {({loading, error, data }) =>{\n                if(loading) return 1\n                if(error) console.log(error)\n                const result = data.getEveryPerson.results\n                console.log(result);\n                \n                return 1;\n\n            }}  \n        </Query>\n        \n    }\n    changeState = (pageNo) =>{\n        const { data } = this.makeQuery(pageNo);\n        console.log(data);\n    }\n    \n    setPageNumber = pageNo =>{\n        this.setState({\n            People:{\n                currentPage: pageNo\n            }\n        })\n    }\n    /*\n    componentDidMount(){\n        console.log(\"hello\");\n        console.log(this.makeQuery(1))\n        console.log('compo data');\n    }*/\n\n    render() {\n\n        let { classes } = this.props;\n\n        return (\n\n            \n            <div className={classes.home}>\n            \n                <div className={classes.People}>\n\n                    <h1 className={classes.title}>CHARACTERS</h1>\n                    <Grid container>\n                    {getPerson(1)}\n                    {/*\n                        <Query \n                        query={getPerson(pageNo)} \n                        variables={{pageNo: 1}}\n                        fetchPolicy=\"cache-and-network\">\n                        {\n                            ({loading,error,data}) =>{\n                                if(loading) return <h2>Loading ....</h2>\n                                if(error) console.log(error)\n                                console.log(data.getEveryPerson.results)\n\n                                return <Person people={data.getEveryPerson.results} />\n\n                            }                            \n                        }\n                    </Query>*/}\n                    </Grid>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nHome.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Home);"]},"metadata":{},"sourceType":"module"}