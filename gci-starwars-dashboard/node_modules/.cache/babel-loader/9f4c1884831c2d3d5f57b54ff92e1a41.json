{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    query{\\n        \\n        getEveryPerson(page: \", \"){\\n            count\\n            next\\n            results{\\n                name\\n                gender\\n                skin_color\\n                birth_year\\n                eye_color\\n\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport { useEffect } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = theme => ({\n  poster: {\n    width: '100%',\n    height: '300px'\n  },\n  home: {\n    margin: '40px',\n    paddingTop: '100px'\n  },\n  title: {\n    padding: '15px',\n    color: '#FFE81F',\n    borderRadius: '10px',\n    backgroundColor: 'black',\n    textAlign: 'center'\n  },\n  card: {\n    margin: '10px',\n    color: '#FFE81F',\n    backgroundColor: 'black'\n  },\n  name: {\n    borderBottom: '2px white'\n  }\n});\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nconst getPerson = pageNo => {\n  const all = gql(_templateObject(), pageNo);\n  return all;\n};\n\nexport class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.makeQuery = async pageNo => {\n      await client.query({\n        query: getPerson(pageNo)\n      }).then(result => {\n        const data = result.data;\n        this.setState({\n          count: data.getEveryPerson.count,\n          people: data.getEveryPerson.results\n        });\n      });\n    };\n\n    this.state = {\n      currentPage: 1,\n      people: null,\n      count: null\n    };\n  }\n\n  async componentDidMount() {\n    await this.makeQuery(1);\n    console.log(this.state.people);\n  }\n\n  render() {\n    let classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: classes.home,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.People,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"CHARACTERS\"), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, console.log(\"data for this\", this.state.people), this.state.people.map(person => React.createElement(Grid, {\n      item: true,\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: classes.card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(CardActionArea, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"h5\",\n      component: \"h2\",\n      className: classes.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, person.name), React.createElement(List, {\n      style: {\n        color: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Birth Year: \", person.birth_year)), React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Gender: \", person.gender)), React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Eye Color: \", person.eye_color)), React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Skin Color: \", person.skin_color)), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"small\",\n      style: {\n        color: '#FFE81F'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Know More\"))))))))))));\n  }\n\n}\nHome.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Home);","map":{"version":3,"sources":["/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js"],"names":["React","Component","gql","Query","useQuery","PropTypes","withStyles","poster","Person","Grid","useEffect","ApolloClient","ApolloProvider","Card","CardActionArea","CardActions","CardContent","Button","Typography","List","ListItem","ListItemText","styles","theme","width","height","home","margin","paddingTop","title","padding","color","borderRadius","backgroundColor","textAlign","card","name","borderBottom","client","uri","getPerson","pageNo","all","Home","constructor","props","makeQuery","query","then","result","data","setState","count","getEveryPerson","people","results","state","currentPage","componentDidMount","console","log","render","classes","People","map","person","birth_year","gender","eye_color","skin_color","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport { useEffect } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = theme=> ({\n    \n    poster:{\n        width: '100%',\n        height: '300px'\n    },\n    home:{\n        margin: '40px',\n        paddingTop: '100px',\n    },\n    title:{\n        \n        padding: '15px',\n        color: '#FFE81F',\n        borderRadius: '10px',\n        backgroundColor: 'black',\n        textAlign: 'center'\n    },\n    card:{\n        margin: '10px',\n        color: '#FFE81F',\n        backgroundColor: 'black'\n    },\n    name:{\n\n        borderBottom: '2px white'\n    }\n})\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/graphql',\n  });\n\nconst getPerson = (pageNo) =>{\n    \n    const all  = gql`\n    query{\n        \n        getEveryPerson(page: ${pageNo}){\n            count\n            next\n            results{\n                name\n                gender\n                skin_color\n                birth_year\n                eye_color\n\n            }\n        }\n    }\n    `;\n\n    return all;\n    \n}\n\nexport class Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            currentPage: 1,\n            people: null,\n            count: null,\n            \n        }\n    }\n\n    makeQuery = async pageNo =>{\n        await client.query({\n                    query: getPerson(pageNo)\n                                })\n                                .then(result => {\n                                    const data = result.data\n                                    this.setState({\n                                        count: data.getEveryPerson.count,\n                                        people: data.getEveryPerson.results\n                                    })\n                                    \n                                });\n    }\n\n\n    async componentDidMount(){\n           await this.makeQuery(1);\n           console.log(this.state.people)\n    }\n    \n\n    render() {\n\n        let { classes } = this.props;\n        return (\n\n            \n            <div className={classes.home}>\n            <ApolloProvider client={client}>\n                <div className={classes.People}>\n\n                    <h1 className={classes.title}>CHARACTERS</h1>\n                    <Grid container>\n\n                    {console.log(\"data for this\",this.state.people)}\n                    \n                    {this.state.people.map(person => (\n                        <Grid item sm={2}>\n                            <Card className={classes.card}>\n                                <CardActionArea>\n                                    <CardContent>\n                                        <Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.name}>\n                                            {person.name}\n                                        </Typography>\n                                                        \n                                        <List style={{color: 'white'}}>\n            \n                                                <ListItem>\n                                                    <ListItemText>Birth Year: {person.birth_year}</ListItemText>\n                                                </ListItem>\n\n                                                <ListItem>\n                                                    <ListItemText>Gender: {person.gender}</ListItemText>\n                                                </ListItem>\n\n                                                <ListItem>\n                                                    <ListItemText>Eye Color: {person.eye_color}</ListItemText>\n                                                </ListItem>\n\n                                                <ListItem>\n                                                    <ListItemText>Skin Color: {person.skin_color}</ListItemText>\n                                                </ListItem>\n\n                                                <CardActions>\n                                                    <Button size=\"small\" style={{color: '#FFE81F'}}>\n                                                    Know More\n                                                    </Button>\n                                                </CardActions>\n\n                                        </List>\n                                    </CardContent>\n                                </CardActionArea>        \n                            </Card>\n                        </Grid>\n                    ))}\n                    </Grid>\n\n                </div>\n                </ApolloProvider>\n            </div>\n        )\n    }\n}\n\nHome.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Home);"]},"metadata":{},"sourceType":"module"}