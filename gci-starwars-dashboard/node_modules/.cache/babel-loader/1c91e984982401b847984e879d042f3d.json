{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    query{\\n        \\n        getEveryPerson(page: \", \"){\\n            count\\n            next\\n            results{\\n                name\\n                gender\\n                skin_color\\n                birth_year\\n                eye_color\\n\\n            }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport { useEffect } from 'react';\n\nconst styles = theme => ({\n  poster: {\n    width: '100%',\n    height: '300px'\n  },\n  home: {\n    margin: '40px',\n    paddingTop: '100px'\n  },\n  title: {\n    padding: '15px',\n    color: '#FFE81F',\n    borderRadius: '10px',\n    backgroundColor: 'black',\n    textAlign: 'center'\n  }\n});\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\nconst getPerson = pageNo => {\n  const all = gql(_templateObject(), pageNo);\n  return all;\n};\n/*\nmakeQuery = (pageNo) =>(\n    <Query query={getPerson(pageNo)}>\n        {\n            async ({loading,error,data}) =>{\n                if(loading) return <h2>Loading ....</h2>\n                if(error) console.log(error)\n                console.log(data.getEveryPerson)\n\n                }                          \n        }\n    </Query>\n)*/\n\n\nexport class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.makeQuery = pageNo =>\n    /*\n    <Query query={getPerson(pageNo)}>\n        {\n            async ({loading,error,data}) =>{\n                if(loading) return <h2>Loading ....</h2>\n                if(error) console.log(error)\n                console.log(data.getEveryPerson.results[0].name)\n                const arr = []\n                data.getEveryPerson.results.map(person =>{\n                    arr.push(person.name);\n                })\n                return arr;\n                }              \n        }\n    </Query>*/\n    client.query({\n      query: getPerson(1)\n    }).then(result => console.log('Result', result));\n\n    this.state = {\n      People: {\n        currentPage: 1,\n        count: null,\n        people: null,\n        per_page: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.makeQuery(1);\n  }\n\n  render() {\n    let classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: classes.home,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.People,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"CHARACTERS\"), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.makeQuery(1)))));\n  }\n\n}\nHome.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Home);","map":{"version":3,"sources":["/home/sayamss/Desktop/my-codes/Google Code In/Jboss Community/StarsWars-Dashboard/gci-starwars-dashboard/src/components/Home.js"],"names":["React","Component","gql","Query","useQuery","PropTypes","withStyles","poster","Person","Grid","useEffect","styles","theme","width","height","home","margin","paddingTop","title","padding","color","borderRadius","backgroundColor","textAlign","client","ApolloClient","uri","getPerson","pageNo","all","Home","constructor","props","makeQuery","query","then","result","console","log","state","People","currentPage","count","people","per_page","componentDidMount","render","classes","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport poster from './poster.jpg';\nimport Person from './Person';\nimport { Grid } from '@material-ui/core';\nimport { useEffect } from 'react';\n\nconst styles = theme=> ({\n    \n    poster:{\n        width: '100%',\n        height: '300px'\n    },\n    home:{\n        margin: '40px',\n        paddingTop: '100px',\n    },\n    title:{\n        \n        padding: '15px',\n        color: '#FFE81F',\n        borderRadius: '10px',\n        backgroundColor: 'black',\n        textAlign: 'center'\n    }\n})\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/graphql',\n  });\n\nconst getPerson = (pageNo) =>{\n    \n    const all  = gql`\n    query{\n        \n        getEveryPerson(page: ${pageNo}){\n            count\n            next\n            results{\n                name\n                gender\n                skin_color\n                birth_year\n                eye_color\n\n            }\n        }\n    }\n    `;\n\n    return all;\n    \n}\n/*\nmakeQuery = (pageNo) =>(\n    <Query query={getPerson(pageNo)}>\n        {\n            async ({loading,error,data}) =>{\n                if(loading) return <h2>Loading ....</h2>\n                if(error) console.log(error)\n                console.log(data.getEveryPerson)\n\n                }                          \n        }\n    </Query>\n)*/\n\n\nexport class Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            People: {\n                currentPage: 1,\n                count: null,\n                people: null,\n                per_page: null,\n            }\n            \n        }\n    }\n\n    makeQuery = (pageNo) =>(\n        /*\n        <Query query={getPerson(pageNo)}>\n            {\n                async ({loading,error,data}) =>{\n                    if(loading) return <h2>Loading ....</h2>\n                    if(error) console.log(error)\n                    console.log(data.getEveryPerson.results[0].name)\n                    const arr = []\n                    data.getEveryPerson.results.map(person =>{\n                        arr.push(person.name);\n                    })\n                    return arr;\n                    }              \n            }\n        </Query>*/\n        client\n        .query({\n        query: getPerson(1)\n        })\n        .then(result => console.log('Result',result))\n            )\n    \n    componentDidMount(){\n        \n        this.makeQuery(1);\n    }\n\n    render() {\n\n        let { classes } = this.props;\n\n        return (\n\n            \n            <div className={classes.home}>\n            <ApolloProvider client={client}>\n                <div className={classes.People}>\n\n                    <h1 className={classes.title}>CHARACTERS</h1>\n                    <Grid container>\n                    {this.makeQuery(1)}\n                    {/*\n                        <Query query={getPerson(1)}>\n                        {\n                            ({loading,error,data}) =>{\n                                if(loading) return <h2>Loading ....</h2>\n                                if(error) console.log(error)\n                                console.log(data.getEveryPerson.results)\n\n                                return <Person people={data.getEveryPerson.results} />\n\n                            }                            \n                        }\n                    </Query>*/}\n                    </Grid>\n\n                </div>\n                </ApolloProvider>\n            </div>\n        )\n    }\n}\n\nHome.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Home);"]},"metadata":{},"sourceType":"module"}